#!/bin/bash

############################ set terminal config ###############################

setterm -cursor off	# make the cursor disappear
stty -echo # make input characters desappear

############################# signal handling ##################################

function exit_snake()
{
	tput clear
	echo "snake: exiting..."
	setterm -cursor on
	stty echo
	exit 1
}


# TODO: uncomment this when the script is finished
#SIG=0
#while [ $SIG -lt 30 ]; do
#	trap "exit_snake" $SIG
#	((SIG++))
#done


######################### random coordinate generator ##########################

function rand_coord()
{
	return $((RANDOM%$1))
}

################################### tmove ######################################

function tputxy()
{
	local Y=$3
	local X=$2
	((Y++))
	((X++))
	echo -en "\033[${Y};${X}H${1}"
	echo -en "\033[1;1H"
}

################################### move_head ##################################

function move_head() 
{
	local HEAD="$1"
	local DIRECTION=$2
	local S_X=$(echo $HEAD | cut -d\  -f1)
	local S_Y=$(echo $HEAD | cut -d\  -f2)
	case $DIRECTION in
		$UP)	((S_Y--));;
		$DOWN)	((S_Y++));;
		$LEFT)	((S_X--));;
		$RIGHT)	((S_X++));;
	esac
	echo "$S_X $S_Y"
}

################################## move_tail ###################################

#function move_tail()
#{
	#get current tail
	#get next block
	#return new coordinates for current tail

	#outside of this, if they are the same as the next block
	#just delete the old tail
#}

################################# collide_test #################################

#function collide_test()
#{
	#compare the snake coordinates to X and Y
#}

########################### get terminal dimensions ############################

tput clear
tput cols > tmp
read COLS < tmp
tput lines > tmp
read LINES < tmp
rm tmp

############################# set game variables ###############################

UP=-2
DOWN=-1
LEFT=1
RIGHT=2
DIR=0

HEAD=0
TAIL=0
declare -a SNAKE
rand_coord $COLS
SNAKE+=("$?")
rand_coord $LINES
SNAKE[$HEAD]="${SNAKE[$HEAD]} $?"
LENGTH=1
ADD_BLOCKS=0

CHERRY="${SNAKE[$HEAD]}"
while [ "$CHERRY" == "${SNAKE[$HEAD]}" ]; do
	rand_coord $COLS
	CHERRY="$?"
	rand_coord $LINES
	CHERRY="$CHERRY $?"
done

################################# initiate game ################################

tputxy "#" ${SNAKE[$HEAD]}
tputxy "*" $CHERRY

INPUT=""
escape_char=$(printf "\033")
while [ $DIR -eq 0 ]; do
	read -sn3 INPUT # get 3 charaters
	case $INPUT in
		"$escape_char[A") DIR=$UP 		;;
		"$escape_char[B") DIR=$DOWN 	;;
		"$escape_char[D") DIR=$LEFT 	;;
		"$escape_char[C") DIR=$RIGHT	;;
	esac
done
OLDIR=$DIR

################################## input loop ##################################

while [ 42 ]; do
	##get input
	DIR_INPUT=$DIR
	read -sn1 -t 0.1 INPUT # get 1 character
	if [ "$INPUT" == "$escape_char" ]; then
    	read -sn2 -t 0.0001 INPUT # read 2 more chars
		case $INPUT in
			'[A') DIR_INPUT=$UP 	;;
			'[B') DIR_INPUT=$DOWN 	;;
			'[D') DIR_INPUT=$LEFT 	;;
			'[C') DIR_INPUT=$RIGHT	;;
		esac
	elif [ "$INPUT" == "q" ]; then
		echo "quitting..."
		sleep 1
		break
	elif [ "$INPUT" == "p" ]; then
		P_X=$((COLS/2))
		((P_X-=2))
		tputxy "PAUSE" $P_X 0
		INPUT=""
		while [ "$INPUT" != "p" ]; do
			read -sn1 INPUT
		done
		tputxy "     " $P_X 0
	fi

	##set direction
	OLDIR=$DIR
	if [ $DIR -lt 0 -a $DIR_INPUT -gt 0 ]; then
		DIR=$DIR_INPUT
	elif [ $DIR -gt 0 -a $DIR_INPUT -lt 0 ]; then
		DIR=$DIR_INPUT
	fi

	##move snake
	NEW_HEAD=$(move_head "${SNAKE[$HEAD]}" $DIR)
	OLD_TAIL="${SNAKE[$TAIL]}"
	if [ "$NEW_HEAD" == "$CHERRY" ]; then # check if the snake is on the cherry
		((ADD_BLOCKS+=4))
		# TODO: re-generate the CHERRY coordinates while it collides with the snake
		rand_coord $COLS
		CHERRY="$?"
		rand_coord $LINES
		CHERRY="$CHERRY $?"
		tputxy "*" $CHERRY
	fi
	if [ $ADD_BLOCKS -ne 0 ]; then
		if [ $HEAD -eq $TAIL -o $DIR -ne $OLDIR ]; then
			SNAKE+=("$NEW_HEAD")
			((HEAD++))
		else
			SNAKE[$HEAD]="$NEW_HEAD"
		fi
		((ADD_BLOCKS--))
		((LENGTH++))
		OLD_TAIL=""
	fi
	SNAKE[$HEAD]="$NEW_HEAD"

	##print snake
	if [ "$OLD_TAIL" != "" ]; then
		tputxy " " $OLD_TAIL
	fi
	tputxy "#" $NEW_HEAD
done

######################### unset custom terminal config #########################

setterm -cursor on	#make the cursor reappear
stty echo #make input characters reappear

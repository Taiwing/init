#!/bin/bash

############################ set terminal config ###############################

setterm -cursor off	#make the cursor disappear

############################# signal handling ##################################

function exit_snake()
{
	tput clear
	echo "snake: exiting..."
	setterm -cursor on
	exit 1
}

SIG=0
while [ $SIG -lt 30 ]; do
	trap "exit_snake" $SIG
	((SIG++))
done


######################### random coordinate generator ##########################

function rand_coord()
{
	return $((RANDOM%$1))
}

################################### tmove ######################################

function tputxy()
{
	echo -en "\e[${3};${2}H${1}"
}

################################## move_block ##################################

function move_block() 
{
	local BLOCK="$1"
	local DIRECTION=$2
	local S_X=$(echo $BLOCK | cut -d\  -f1)
	local S_Y=$(echo $BLOCK | cut -d\  -f2)
	case $DIRECTION in
		$UP)	((S_Y--));;
		$DOWN)	((S_Y++));;
		$LEFT)	((S_X--));;
		$RIGHT)	((S_X++));;
	esac
	echo "$S_X $S_Y"
}

################################# collide_test #################################

function collide_test()
{
	local SNAKE=$1
	local X=$2
	local Y=$3

	#compare the snake coordinates to X and Y
}

########################### get terminal dimensions ############################

tput clear
tput cols > tmp
read COLS < tmp
tput lines > tmp
read LINES < tmp
rm tmp
echo "Columns: $COLS"
echo "Lines: $LINES"

############################# set game variables ###############################

UP=-2
DOWN=-1
LEFT=1
RIGHT=2
DIR=0	#set dir manually as first input
OLDIR=$DIR

declare -a SNAKE
rand_coord $COLS
SNAKE+=("$?")
rand_coord $LINES
SNAKE[0]="${SNAKE[0]} $?"
SNAKE_TAIL="${SNAKE[0]}"
echo "SNAKE[0]=${SNAKE[0]}"
LENGTH=1

#TODO: re-generate the CHERRY coordinates while they are equal to SNAKE[0]
rand_coord $COLS
CHERRY="$?"
rand_coord $LINES
CHERRY="$CHERRY $?"
echo "CHERRY=$CHERRY"

################################# initiate game ################################

tputxy "#" ${SNAKE[0]}
tputxy "*" $CHERRY

INPUT=""
escape_char=$(printf "\u1b")
while [ $DIR -eq 0 ]; do
	read -sn3 INPUT # get 3 charaters
	case $INPUT in
		"$escape_char[A") DIR=$UP 		;;
		"$escape_char[B") DIR=$DOWN 	;;
		"$escape_char[D") DIR=$LEFT 	;;
		"$escape_char[C") DIR=$RIGHT	;;
	esac
done
OLDIR=$DIR

################################## input loop ##################################

while [ 42 ]; do
	##get input
	DIR_INPUT=$DIR
	read -sn1 -t 0.1 INPUT # get 1 character
	if [ "$INPUT" == "$escape_char" ]; then
    	read -sn2 -t 0.0001 INPUT # read 2 more chars
		case $INPUT in
			'[A') DIR_INPUT=$UP 	;;
			'[B') DIR_INPUT=$DOWN 	;;
			'[D') DIR_INPUT=$LEFT 	;;
			'[C') DIR_INPUT=$RIGHT	;;
		esac
	elif [ "$INPUT" == "q" ]; then
		echo "quitting..."
		sleep 1
		break
	fi

	##set direction
	OLDIR=$DIR
	if [ $DIR -lt 0 -a $DIR_INPUT -gt 0 ]; then
		DIR=$DIR_INPUT
	elif [ $DIR -gt 0 -a $DIR_INPUT -lt 0 ]; then
		DIR=$DIR_INPUT
	fi

	##move snake
	SNAKE[0]=$(move_block "${SNAKE[0]}" $DIR)
	tputxy "SNAKE[0]=${SNAKE[0]}" 0 0 #DEBUG

	##print snake
	tputxy " " $SNAKE_TAIL
	tputxy "#" ${SNAKE[0]}
	SNAKE_TAIL="${SNAKE[0]}"
done

######################### unset custom terminal config #########################

setterm -cursor on	#make the cursor reappear
